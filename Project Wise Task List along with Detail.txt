To Do Reminder With Alarm Project :-

-- UI & Significant Featutes Implemented :--
1. Implemented Navigation Drawer UI using Drawer Layout which actually shows your appp's main navigation menu.
   -- Drawer Layout is actually part of Android V4 Support library.
2. Implemented different views for each different screen using Fragments.
   -- Inflated Menu Item using R.Menu.menu resource in onCreateOptionsMenu method.
   -- On clicking menu item , a general Dialog box will be shown.
5. Implemented a Main Dialog box , Reminder Dialog box , Birthday Dialog box using AlertDialog API with Builder design pattern.
6. Implemented Custom ArrayAdapter for ListView with custom list items which works for Main Dialog Box.
7. Converting curent date & time into unix timestamp (milliseconds) using Calender API getTimeInMillis() method & storing into SQLite database for future use.
8. Firing task reminder OR Birthday notification 24 hours prior to actual time of notification in Notification Drawer area as Upcoming event and another notification on actual time as a system level alert dialog box using AlarmManager , PendingIntent & BroadcastReceiver.    



Inventory Tracking App :-

App Detail :- It's primarily for managing inventory efficiently which gives various insights of inventory , over-all Net-Profit of the business , current monetory valuation of inventory. Various modules interact with inventory.
Shows different Reports for purchase , sales , income , expense.

-- UI & Significant Features Implemented :--
1. Developed Inventory Item List , Supplier List , Customer List screen using Custom ArrayAdapter.
2. Implemented different views for Sales Order screen , Purcahse order screen using Fragments & updating those details in local SQLite DB.After successful DB operation ,  updating required Fragments from updated DB.
3. Implemented views for different reports i.e. inventory valuation report , Income - Expense Report , Profit/Loss report using Fragments.
4. Firing low inventory stock notification.



Social Networking App :-

App Detail :-  An app basically connects peer over single platform where one can ask question OR can inquir about anything. Questions are grouped into seperate categories while they are being posted.

-- Significant Features Implemented :-

1. Adding Google Map Activity & setting Map API key.
2. Requesting runtime permission for device location if android version is Marshmallow OR later versions.
3. Setting Marker on Map Activity & Getting Location details.
4. REMIND LOCATION ON THE GO - Created Geofences & Monitoring Geofence transition events (Enter OR Exit) as Location Service detects that the user has entered OR exited Geofence.
5. Implemented Started Service which receives Intent contained in PendingIntent sent from Location Services & send Notification as output.



Real Time Location Tracking App :- 


App Detail :- A real time location tracking android app in which one can add their friends or employees to track their location and show it on Google Maps.

-- Significant Features implemented :-

1. Getting real time location of the device at frequent interval using Google Fused Location Provider API , GoogleApiClient , LocationRequest object , Location callbacks .
2. Implemented Service that runs continuously in the background & sends realtime location data to the backend server as HTTP post request using Volley library.
3. Launching Google Map Activity & setting marker & camera to the location received from server in push notification.
4. Implemented WakefulBroadcastReceiver to acquire lock on Service which gets the location data of other users which is sent from GCM server.This service also runs continuously & sends location data to Google Map Activity using LocalBroadCastReceiver.

Implementation Idea :-
-- https://stackoverflow.com/questions/43909006/how-to-create-a-real-time-location-sharing-android-app
-- https://technoranch.blogspot.com/2014/08/gcm-for-android-with-example.html
-- https://www.pubnub.com/blog/sending-receiving-android-push-notifications-with-gcm-google-cloud-messaging/
-- https://rdcworld-android.blogspot.com/2013/11/android-push-notification-google-cloud.html
-- For how to implement LocalBroadCastReceiver for sending location data from service to activity.
   --https://stackoverflow.com/questions/8802157/how-to-use-localbroadcastmanager.

Concepts Related to Project :--
Why WakefulBroadCast Receiver ??
-- However, note that we did not use a BroadcastReceiver but a WakefulBroadcastReceiver. This simplifies our task: we a normal broadcast receiver, we would need to wake up the CPU if the screen is off, launch the service and put the phone back to sleep. This requires manipulating the Android PowerManager and WakeLock. The WakefulBroadcastReceiver takes care of all that for us. Pretty neat.

Why required tak is implemented in Service ??
-- A broadcast receiver by design cannot execute long tasks. It must call other classes to do its work. We need to create a new class. We cannot start a new activity because we do not want the user to be forced to switch to our app. Instead we use a service. It will be able to execute tasks in the background.
