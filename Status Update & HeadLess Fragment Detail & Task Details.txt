-- how to start tomcat server without eclipse ??
i.e by going into tomcat bin directory & running shutdown.sh , startup.sh file respectively.
then checking in browser by hitting localhost:<port_no>/<project_name>/<end_point>

-- how to create war file for j2ee dynamic web project in eclipse studio & deploying it into tomcat webapps directory.


- how to prepare http post request for localhost login endpoint by HttpURLConnection class i.e. post request header & post request body ???

- exact format for http get & post request ??
- difference between form-data and x-www-form-urlencoded in post request ??


- sending GET request with JWT(JSON Web Token) authorization header to the REST endpoint implemented . But while implementing code  , there was continuous HTTP respose with 405 code . So when debugged , the problem was with setDoOutput method which was set as TRUE. So that has to be removed and only setInput (true) must be set when ypu are sending GET request with HttpURLConnection class.Then only TOMCAT server responds with 200 http status code.
- lesson for today - get in depth with working mechanism of setDoInput() & setDoOutput() method.




HEADLESS FRAGMENTS FOR ASYNC TASK i.e. BACKGROUND TASK :-

-DURING SCREEN ORIENTATION CHANGE  -- " Retaining UI state of the activity i.e. checkbox state OR Radio button state by effectively using onSaveInstance method & restroing UI state via Bundle Obejects " IS COMPLETELY DIFFERENT CONCEPT THAN Retaining Running Object state i.e. AsyncTask , Socket , Threads by effectively using HEADLESS FRAGMENT & calling fragments method setRatainInstance(true).

- Got familiar with Headless Fragment working from following blog & project.
- https://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html
- https://github.com/alexjlockwood/adp-worker-fragments
- https://github.com/dv-android/best-HeadLess-Fragment-example


PROJECT NAME :- ListViewAsyncTask
Github URL :- https://github.com/dv-android/ListViewAsyncTask

- This project fully demonstrates the use of HttpUrlConnection class to fetch JSON response from REST API using AsyncTask. Whenever you want to peform any background work i.e. network operation like getting data from remote API , always execute that work in seperate thread because implementing such operations in main thread may cause 'Application Not Responding - ANR' problem if network connection fails OR not responding as expected.

- Problem with AsyncTask during Configuration Change & The need to have HEADLESS FRAGMENT :-
One problem with configuration changes and the destroy-and-create cycle that Activitys go through as a result stems from the fact that these events are unpredictable and may occur at any time. Concurrent background tasks only add to this problem. Assume, for example, that an Activity starts an AsyncTask and soon after the user rotates the screen, causing the Activity to be destroyed and recreated. When the AsyncTask eventually finishes its work, it will incorrectly report its results back to the old Activity instance, completely unaware that a new Activity has been created. As if this wasn’t already an issue, the new Activity instance might waste valuable resources by firing up the background work again, unaware that the old AsyncTask is still running. For these reasons, it is vital that we correctly and efficiently retain active objects across Activity instances when configuration changes occur.

- Managing the Active Object inside a Retained Fragment :-
Ever since the introduction of Fragments in Android 3.0, the recommended means of retaining active objects across Activity instances is to wrap and manage them inside of a retained “worker” Fragment. By default, Fragments are destroyed and recreated along with their parent Activitys when a configuration change occurs. Calling Fragment#setRetainInstance(true) allows us to bypass this destroy-and-recreate cycle, signaling the system to retain the current instance of the fragment when the activity is recreated. As we will see, this will prove to be extremely useful with Fragments that hold objects like running Threads, AsyncTasks, Sockets, etc.

- In our project the requirement was as follow.
ListActivity should fetch an arraylist from remote REST api & if you rotate the screen the complete state of ListView must be maintained.


- We had one main activity i.e. List Activity which hosts the HeadLess Fragment. Now this HeadLess Fragment actually holds a AsyncTask object which actually gets the data from remote API.
- We are creating an object of AsyncTask & then calling its execute() method in the fragment's onCreate method in spite of Activity's onCreate method .Also setRetainInstance(true) has been called from fragments onCreate method. No matter how many times Activity gets destroyed & re-created during configuration changes but Headless Fragment won't be destroyed & re-created . It will be held in memory which means fragment's onCreate & onDestroy method will be called only for ONCE during entire lifetime of an activity because we called setRetainInstance() method to be true.
- Now if we would have written creation of AsyncTask object & calling its execute method in Activity's onCreate method then there would have been severe memory leaks. How ? 
Suppose your AsyncTask has not completed its operation i.e downloading data from network . Your AsyncTask is actually in middle of completing its operation & if the user has rotated the deivce so your activity got destroyed & created again.Now newly created Activity lost the reference to the previously running AsyncTask object &  has created new AssyncTask object. That means your old AyncTask object remain intact in memory & now it has no idea to which activity it has to report back its result. Besides that , same new copy of AsyncTask object has been created by Activity though old one was present.So this is called as major MEMMORY LEAK issue in your app.  

SURPRISING PART :-
- We had implemented HeadLess Fragment for AsyncTask successfully but if I rotate the device Activity was becoming blank which means no listview at all.
- Debugged all lifecycle methods of Activity as well as Fragment by printing log statement to ensure that Fragment's onCreate & onDestroy method called only for once even though Activity gets destroyed & created again. So that was implemented correctly , no issue.
- so why listview doesn't appear if device gets rotated though HeadLess Fragment implemented correctly. Where is the problem ??
- The problem was Headless Fragment only deals with the active running object states i.e. it only retains running object while configuration change. Running objects means Thread , Socket OR AsyncTask.Retaining running object state has got nothing to do with the UI state of an activity. 
- Reatining running object state by using Headless Fragment does not actually retain the UI state of an activity.
- The reason why ListActivity lost its UI state i.e all of its list rows is because soon after activity destroyed , the activity has lost its UI state completely. And whenever activity re-created , we were not restoring its UI state.
- So the solution was that before activity gets destroyed , save its UI state in bundle object in onSaveInstance method & retrieve it back in onRestoreInstance method.
- But in our case we had to retain ARRAYLIST<Object> and Bundle object only holds primitive data. ARRAYLIST<Object> is actually non-primitive data. So to pass ARRAYLIST<Object> in Bundle object we had to typecast it as a Serializable as follow.
         
                     bundle.putSerializable("ARRAYLIST",(Serializable) arrayList)

- But while typecasting non-primitive object as a Seraliazable as above  , there was continues a run time error was being thrown at when interpreter comes to above line & error was as follow....

                             "java.lang.RuntimeException: Parcel: unable to marshal value null"

So the problem was actually with NULL values which were actually present in arrayList object because java doesn't allow serailization of NULL values , it can only seraialize NON-NULL values.
- After quite R & D over google , got the solution. All NULL values must be removed from arrayList before seralizing & for that you have to use 3rd Party library which is JACKSON.
- JACKSON JSONlibrary allows removal of NULL values from any type of JSON response that you receive from remote API.Once all NULL values have been removed then arrayList can be serialized very easily without any error.

- And retrieve it as follow in onRetainInstanceState...
           ArrayList<Object> arrayList = (ArrayList<Object>)bundleState.getSerializable("ARRAYLIST")

- But still there is one issue,  we restored all the list rows of listview while configuration change but the scroll position of listview  is lost. i.e. if user has scrolled up to 20th row & that 20th row is now the first row & user rotated the deivce but listview starts showing listrow from the 1st row , not 20th row.
- That can be retained by using Parcelable interface.Get the listview current scroll & other state by calling onSaveInstanceState() method on listview & save it in a parcelable reference variable.Then put that parcelable object in Bundle object as follow.
                 
                 Parcelable state =  getListView().onSaveInstanceState();
                 bundle.putParcelable("listViewState",state); 

- And then retrieve that Parcelable object in onRestoreInstanceState() method as follow..

                  Parcelable state = bundleState.getParcelable("listViewState");
                  getListView().onRestoreInstanceState(state);

References :-
-https://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html
-https://stackoverflow.com/questions/11182180/understanding-fragments-setretaininstanceboolean
-https://futurestud.io/tutorials/how-to-save-and-restore-the-scroll-position-and-state-of-a-android-listview
-https://newfivefour.com/android-save-list-position-rotation-backpress.html
-https://stackoverflow.com/questions/13601883/how-to-pass-arraylist-of-objects-from-one-to-another-activity-using-intent-in-an



Got familiar with Android Parcelable concept & why it exists ?
The main reason why Parcelable exsists is 'suppose you have to pass custom java objects between two Android Components i.e. from one Activity to another Activity'
References :-
BEST - https://guides.codepath.com/android/using-parcelable
http://www.vogella.com/tutorials/AndroidParcelable/article.html



Got familiar with WakefulBroadCastReceiver & why it exists ??
If you have background service in your app & you want to keep it in running state even when the device power goes off i.e screen gets off then you have to acquire WakeLock in your service.
By default no bakground service acuqires wakelock , one has to acquire it manually.

Perfect Usecase of WakeLock :- 
https://stackoverflow.com/questions/32085565/android-background-service-and-wake-lock

References :-
-https://software.intel.com/en-us/android/articles/wakelocks-for-android
-https://developer.android.com/training/scheduling/wakelock#wakeful
-https://www.concretepage.com/android/android-alarm-clock-tutorial-to-schedule-and-cancel-alarmmanager-pendingintent-and-wakefulbroadcastreceiver-example
-https://www.thepolyglotdeveloper.com/2014/10/use-broadcast-receiver-background-services-android/
-https://www.truiton.com/2014/09/android-service-broadcastreceiver-example/






NEW TOPIC :- RECYCLER VIEW AND CARD VIEW ( MATERIAL DESIGN )


- Got fully familiar with Recycler View & Card View from Head First Android book 14th Chapter. Besides that also followed videos on youtube. Why Recycle View exists ?? that is best answered in youtube videos & how recycler view along with card could be coded that is best answered in Head First Android 14th Chapter.
- https://www.quora.com/What-is-RecyclerView-in-Android-and-how-does-it-work
- https://stackoverflow.com/questions/40584424/simple-android-recyclerview-example - BEST
- https://www.youtube.com/watch?v=Wq2o4EbM74k
- https://www.youtube.com/watch?v=A5cUZlUnRUw
- https://www.youtube.com/watch?v=mGTRNp6FbU4
- https://www.youtube.com/watch?v=OoCySqneJno

- GitHub Project Detail - https://github.com/dv-android/BitsAndPizzaMaterial
- Coded  project named 'BitsAndPizzaMaterial' which illustrates the use of Card View & Recycler View.

Important Note :-
In Android you code everything in MVC pattern. For e.g. to code above project which exposes Card View & Recycler view usage ,  your entire code gets divide into three parts.
1. Your individual ROW's XML layout i.e. what different view elements your single row will contain 
(in our case xml code for Card View which also includes xml code for different view elements) - "VIEW" part
2. Custom Adapter class which extends RecyclerView.Adapter class & override its methods. - "CONTROLLER" part
3. Data Set i.e. list of Data items that has to be stuffed into each row's view elements. That is defined by POJO file in our case OR you may recieve data from remote web API . - "MODEL" part 



9th April'2019
- While revising project name "Joke" , gone through "what are Services ?" in written notes.
--  https://github.com/dv-android/Joke
- Also gone through "Task & Back Stack in Android" from following link.
--  https://developer.android.com/guide/components/activities/tasks-and-back-stack

I'm sure you can find an extensive list of differences by simply googling something such as 'Android IntentService vs Service'
One of the more important differences per example is that IntentService ends itself once it's done.
Some examples (quickly made up) could be;
IntentService: If you want to download a bunch of images at the start of opening your app. It's a one-time process and can clean itself up once everything is downloaded.
Service: A Service which will constantly be used to communicate between your app and back-end with web API calls. Even if it is finished with its current task, you still want it to be around a few minutes later, for more communication.

- If you start service by startServcie() method then that will be treated as STRATED service , no matter whether it has been implemented by extending Service class OR IntentService class.
- To get complete working of Started service by extending IntentService class , I started a service named "DelayedMessageService" (in our project "Joke") by startService(intent) method and then executed  "finish()" method in activity to destroy cuurently running activity.
- Though Activity which started the 'DelayedMessageService' got destroyed but service kept running & after 10 seconds of interval it showed status bar notification.  




25th April'2019

- Gone through BitsAndPizzaa project :-
- Github Link :- https://github.com/dv-android/BitsandPizzaa
- Project Points to be Included :-
- How Navigation Drawer works ?? i.e. Drawer Layout..
- Create XML drawrer layout file . Inside DrawerLayout , the view that has to be acted as a DRAWER add attribute named "android:layout_gravity="start". layout_gravity attribute in Drawer Layout defines the opening direction of Drawer view i.e. from Left to Right OR from Right to Left. 
- For showing different menu items into ActionBar , you have to create Menu resources XML with required menu items & that Menu XML resource is actually inflated in onCreateOptionsMenu() method.
- Just before menu is being inflated over ActionBar onPrePareOptionMenu() method is called where you can customize menu items as per your need ..
- Fragment transaction's addToBackStack method decides whether opening order of the fragments to be maintained OR not when user presses the Back button.If you don't call this method then background navigation on back button won't work i.e. clicking on back button will get you out of the app.


2nd May'2019

- Gone through How ExpandableListAdapter is actually implemented ??
- http://www.androidhive.info/2013/07/android-expandable-list-view-tutorial/
- While going through this article , there is a heavy use of "HashMap" in ExpandableListAdapter so figured out how "HashMap"   works ??
- https://www.geeksforgeeks.org/java-util-hashmap-in-java/
- Also while going through "HashMap" article from above article , figured out what is actually "Hashing" ??
- https://www.geeksforgeeks.org/hashing-set-1-introduction/



7th May'2019

- What are Services in Android ??
- Best reference would be from Head First Android reference book.
- There are two types of services in Android..
  1. Started Service
  2. Bound Service
 
 1. Started Services are those which runs indefinately irrespective of whether the component that actually started the service has been running or not which means the activity which has started the service has been destroyed but the service keeps running until it finishes its job. Such services are actually implemented by extending IntentService class and the service code is actually written inside onHandleIntent() method. 
     -  onHandleIntent() method runs on different thread so you can not update UI components from this method directly because in Android UI can only be updated by Main thread. You have to use "Handler" to do that.Handler from this method can easily update the UI component.
     -  Why there is actually need of doing updation operation from Service ? is --- If service has finished off its operation and it has to be notified to the user then there are basically two ways this can be achieved.
           -  Either you notify it via Toast notification OR show notification message on Notification Drawer by using Notification Service.
     - If you are implementing this using Notification Service then there is no as such need of Handler because the notification service deals will all of the issues involved in a background service sending updates to the screen i.e. to Main Thread. This means that you no longer need to use a handler in order to update the user interface; the notification service handles it for you.
     -  onStartCommand() method actually runs on Main thread in IntentService class so to use Handler in this method you have to declare Handler reference variable at class level & then  you have to invoke it inside onStrtCommand method. After invocation , you will call post method on Handler object from onHandleIntent() method which will actually update the UI component.

 2. Bound Services are those which are actually bound to Android Component i.e. if the Activity which has started the Service has been destroyed the the Service will also be destroyed.
    - Gone through following article - 
    https://www.truiton.com/2014/11/bound-service-example-andrsoid/
    - Then gone through Bound Services article from Android official docs - 
    https://developer.android.com/guide/components/bound-services#java
    - Also gone through what is the axact Role of Binder in Android Framework ?
    https://stackoverflow.com/questions/15222041/android-what-is-binder-thread
    https://sujaiantony.wordpress.com/2011/12/28/an-android-101-an-overview-on-binder-framework/
    
13'th June 2019

Gone through how to debug android application by using integrated studio debugger.
- https://www.strv.com/blog/debugging-in-android-studio-as
- https://www.youtube.com/watch?v=nBaL78HC0ls
- https://www.youtube.com/watch?v=LKCvtNj8C0s

14'th June 2019

Gone thorugh how Android HttpURLConnection class consumes JSON data as a STREAM & convert it again into JSON via JAVA STREAMING API. For that , you should be well aware of HOW STRAEAMING works in JAVA , referred following links.
- https://www.studytonight.com/java/java-io-stream.php
- https://www.quora.com/What-is-stream-in-java
- https://stackoverflow.com/questions/2492076/android-reading-from-an-input-stream-efficiently
- https://stackoverflow.com/questions/45635739/rest-streaming-json-output 

           JSON string read by ANdroid as a InputStream i.e. InputStream stream = connection.getInputStream()
                                            
                                            |
                                            |

           Then convert that ByteStream into CharacterStream using InputStreamReader class. i.e.
                    Reader reader = new InputStreamReader(stream, "UTF-8");
                                            
                                            |
                                            | 

           Then convert that CharacterStream into character Array using Reader class's read(char[] cbuf) method
                             int readSize = reader.read(rawBuffer).
           Here rawBuffer is actually declared as character array.

           									|
           									|

           Then convert it into StringBuffer using following method.
           					StringBuffer buffer = new StringBuffer();
                            buffer.append(rawBuffer, 0, readSize);

                            				|
                            				|

           Then convert that StringBuffer object into String object.
                            String conString = buffer.toString();

                            				|
                            				|

        	Then prepare JSONObject from that String object.
        	                JSONObject jsonObj = new JSONObject(conString);

        	                				|
        	                				|

			Now you have to iterate through each key in JSON object & retrieve its value & push it into ArrayList.
				        ArrayList  arrayList = new ArrayList<Object>();
				        Iterator<String> keys = jsonObj.keys();

				        while(keys.hasNext()) {
				            String key = keys.next();
				            Object temp = jsonObj.get(key);
				            arrayList.add(temp);
				            Log.d("LoadFeedData outside ","json content is "+temp);
				            if (jsonObj.get(key) instanceof JSONObject) {
				                Log.d("LoadFeedData inside","json content is "+jsonObj.get(key));
				            }
				        }


				        					|
				        					|
            And finally you have to return that ArrayList object from Async Task to Main Activity , where it will be used while creating Listview's ArrayAdapter class.



3rd July'19

- What is Volley library in Android & How it is useful ?
- Please refer Volley Sub-Bookmark in main Android Bookmark.

 Referred Links
 - https://www.youtube.com/watch?v=yhv8l9F44qo
 - https://www.youtube.com/watch?v=jvaYsA5u0Ww   ---- BEST
 - http://www.technotalkative.com/android-volley-library-example

 4th July'19 

 - While going through Volley Tutorial came across SingleTon Design Pattern i.e. https://www.youtube.com/watch?v=bpYqzRkxNPM
 - So figured out what is Singleton Design Patterns from following link ..
   -  https://howtodoinjava.com/design-patterns/creational/singleton-design-pattern-in-java/

- For complete guide to Design Patterns , please check Bookmark 'Design Patterns w.r.t Java' i.e.  
   - https://howtodoinjava.com/gang-of-four-java-design-patterns/

- While going through Singleton Design Pattern , figured out what is exact use of 'VOLATILE' keyword in Java ?
 - https://javarevisited.blogspot.com/2011/06/volatile-keyword-java-example-tutorial.html

 15th July'19

 - What is Context exactly in Android & Why it exists ???
   - https://www.youtube.com/watch?v=89H-FHFyXaA